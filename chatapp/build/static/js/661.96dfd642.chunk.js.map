{"version":3,"file":"static/js/661.96dfd642.chunk.js","mappings":"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","sources":["Pages/SetAvatar.jsx","Utils/APIRoutes.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n// import loader from \"../assets/loading.png\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nimport { setAvatarRoute } from \"../Utils/APIRoutes\";\r\nimport { Buffer } from \"buffer\";\r\n\r\nconst SetAvatar = () => {\r\n  const Avatar_api = \"https://api.multiavatar.com\";\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [avatars, setavatars] = useState([]);\r\n  const [isLoading, setisLoading] = useState(true);\r\n  const [selectedAvatar, setselectedAvatar] = useState(undefined);\r\n  const [avatartype, setavatartype] = useState(false);\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [selectedAvatarImage, setSelectedAvatarImage] = useState(null);\r\n\r\n  const toastOptions = {\r\n    position: \"bottom-right\",\r\n    autoClose: 5000,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    theme: \"dark\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!localStorage.getItem(\"chat-app-user\")) {\r\n      navigate(\"/login\");\r\n    }\r\n  }, []);\r\n\r\n  const setProfilePicture = async () => {\r\n    if (selectedAvatar === undefined) {\r\n      toast.error(\"Please select an avatar\", toastOptions);\r\n    } else {\r\n      const user = await JSON.parse(localStorage.getItem(\"chat-app-user\"));\r\n\r\n      const { data } = await axios.post(`${setAvatarRoute}/${user._id}`, {\r\n        image: avatars[selectedAvatar],\r\n      });\r\n\r\n      if (data.isSet) {\r\n        user.isAvatarImageSet = true;\r\n        user.avatarImage = data.image;\r\n        localStorage.setItem(\"chat-app-user\", JSON.stringify(user));\r\n        navigate(\"/\");\r\n      } else {\r\n        toast(\"Error setting avatar, Please try again\", toastOptions);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const avatar_data = async () => {\r\n      const data = [];\r\n      for (let i = 0; i < 4; i++) {\r\n        try {\r\n          let image;\r\n          image = await axios.get(\r\n            `${Avatar_api}/${Math.round(Math.random() * 100000000)}`\r\n          );\r\n          const buffer = new Buffer(image.data);\r\n          data.push(`data:image/svg+xml;base64,${buffer.toString(\"base64\")}`);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n\r\n      setavatars(data);\r\n      setisLoading(false);\r\n    };\r\n\r\n    avatar_data();\r\n  }, []);\r\n\r\n  const upload = (e) => {\r\n    setSelectedImage(e.target.files[0]);\r\n\r\n    const selectedfile = e.target.files;\r\n\r\n    if (selectedfile.length > 0) {\r\n      const [imageFile] = selectedfile;\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsDataURL(imageFile);\r\n      fileReader.onload = () => {\r\n        const srcData = fileReader.result;\r\n        // const [prefix, base] = srcData.split(\",\");\r\n        setSelectedAvatarImage(srcData);\r\n      };\r\n    }\r\n  };\r\n\r\n  const setProfileImage = async () => {\r\n    if (selectedAvatarImage === null) {\r\n      toast.error(\"Please select an avatar\", toastOptions);\r\n    } else {\r\n      const user = await JSON.parse(localStorage.getItem(\"chat-app-user\"));\r\n\r\n      const { data } = await axios.post(`${setAvatarRoute}/${user._id}`, {\r\n        image: selectedAvatarImage,\r\n      });\r\n\r\n      if (data.isSet) {\r\n        user.isAvatarImageSet = true;\r\n        user.avatarImage = data.image;\r\n        localStorage.setItem(\"chat-app-user\", JSON.stringify(user));\r\n        navigate(\"/\");\r\n      } else {\r\n        toast(\"Error setting avatar, Please try again\", toastOptions);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AvatarContainer>\r\n      <div className=\"top-bar\">\r\n        <button\r\n          className={`button-55 leftbtn ${avatartype ? \"activebtn\" : \"\"}`}\r\n          onClick={() => {\r\n            setavatartype(true);\r\n          }}\r\n        >\r\n          Avatar Profile Photo\r\n        </button>\r\n        <button\r\n          className={`button-55 rightbtn ${avatartype ? \"\" : \"activebtn\"}`}\r\n          onClick={() => {\r\n            setavatartype(false);\r\n          }}\r\n        >\r\n          Custom Profile Photo\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"container\">\r\n        {avatartype ? (\r\n          isLoading ? (\r\n            <div className=\"loader\">\r\n              <div className=\"container\">\r\n                <span className=\"one\"></span>\r\n                <span className=\"two\"></span>\r\n                <span className=\"three\"></span>\r\n                <span className=\"four\"></span>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"avatar_cont\">\r\n              <div className=\"title_container\">\r\n                <h1>Pick an avatar as your Profile picture</h1>\r\n              </div>\r\n              <div className=\"avatars\">\r\n                {avatars.map((avatar, index) => {\r\n                  return (\r\n                    <div\r\n                      key={index}\r\n                      className={`avatar ${\r\n                        selectedAvatar === index ? \"selected\" : \"\"\r\n                      }`}\r\n                    >\r\n                      <img\r\n                        src={avatar}\r\n                        alt=\"avatar\"\r\n                        onClick={() => {\r\n                          setselectedAvatar(index);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n              <button className=\"submitbtn\" onClick={setProfilePicture}>\r\n                {\" \"}\r\n                Set as Profile Picture\r\n              </button>\r\n            </div>\r\n          )\r\n        ) : (\r\n          <div className=\"header\">\r\n            <div className=\"preview\">\r\n              {selectedImage ? (\r\n                <img\r\n                  className=\"preview\"\r\n                  src={URL.createObjectURL(selectedImage)}\r\n                  alt=\"\"\r\n                />\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n            </div>\r\n            <label htmlFor=\"upload\" className=\"button-54\">\r\n              upload ðŸŽ©\r\n            </label>\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/jpg,image/jpeg,image/png\"\r\n              onChange={upload}\r\n              id=\"upload\"\r\n            />\r\n            <button className=\"submitbtn\" onClick={setProfileImage}>\r\n              {\" \"}\r\n              Set as Profile Picture\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <ToastContainer />\r\n    </AvatarContainer>\r\n  );\r\n};\r\n\r\nconst AvatarContainer = styled.div`\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 3rem;\r\n    background-color: #131324;\r\n    height: 100vh;\r\n    width: 100vw;\r\n\r\n    .loader{\r\n        background: #012;\r\n        height: 100vh;\r\n        width: 100vw;\r\n        display: grid;\r\n        place-items: center;\r\n\r\n        .container {\r\n            position: relative;\r\n            width: 200px;\r\n            height: 200px;\r\n          }\r\n          span {\r\n            position: absolute;\r\n            display: block;\r\n            width: 40%;\r\n            height: 40%;\r\n            border-radius: 50%;\r\n            animation: speed 2s infinite ease-in-out;\r\n          }\r\n          .one {\r\n            background: #4285f4;\r\n            animation-delay: 1.5s;\r\n          }\r\n          .two {\r\n            background: #ea4335;\r\n            animation-delay: 1s;\r\n          }\r\n          .three {\r\n            background: #fbbc05;\r\n            animation-delay: 0.5s;\r\n          }\r\n          .four {\r\n            background: #34a853;\r\n          }\r\n          @keyframes speed {\r\n            0% {\r\n              transform: translate(0%);\r\n              border-radius: 50%;\r\n            }\r\n            25% {\r\n              transform: translate(150%) scale(0.5);\r\n              border-radius: 0%;\r\n            }\r\n            50% {\r\n              transform: translate(150%, 150%);\r\n              border-radius: 50%;\r\n            }\r\n            75% {\r\n              transform: translate(0, 150%) scale(0.5);\r\n              border-radius: 0%;\r\n            }\r\n          }\r\n          \r\n    }\r\n\r\n\r\n    .title_container{\r\n      text-align: center;  \r\n      h1{\r\n            color: white;\r\n            \r\n        }\r\n    }\r\n\r\n    .avatars{\r\n        display: flex;\r\n        gap: 2rem;\r\n\r\n        .avatar{\r\n            border: 0.5rem solid transparent;\r\n            padding: 0.5rem;\r\n            border-radius: 5rem;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            transition: 0.3s ease-in-out;\r\n            img{\r\n                height: 6rem;\r\n            }\r\n        }\r\n        .avatar:hover{\r\n            transform scale(1.2);\r\n        }\r\n\r\n        .selected{\r\n            border: 0.5rem solid #4e0eff;\r\n        }\r\n    }\r\n\r\n    .submitbtn{\r\n        background-color: #997af0;\r\n        color: white;\r\n        padding: 1rem 2rem;\r\n        border: none;\r\n        font-weight: bold;\r\n        cursor: pointer;\r\n        border-radius: 0.4rem;\r\n        font-size: 1rem;\r\n        text-transform: uppercase;\r\n        transition: 0.5s ease-in-out;\r\n        &:hover{\r\n          background-color: #4e3eff;\r\n        }\r\n      }\r\n\r\n      .activebtn{\r\n        background: blue;\r\n      }\r\n\r\n      input[type=\"file\"] {\r\n        display: none;\r\n      }\r\n\r\n      .button-55{\r\n        padding: 1rem;\r\n        border: none;\r\n        width: 35vw;\r\n        // color: red;\r\n        font-size: 1rem;\r\n        font-weight: bold;\r\n      }\r\n\r\n      .leftbtn{\r\n        \r\n        border-bottom-left-radius: 1rem;\r\n        border-top-left-radius: 1rem;\r\n      }\r\n\r\n      .rightbtn{\r\n        \r\n        border-bottom-right-radius: 1rem;\r\n        border-top-right-radius: 1rem;\r\n      }\r\n\r\n\r\n      .button-54{\r\n        background: aliceblue;\r\n    padding: 0.7rem 1rem;\r\n    border-radius: 0.5rem;\r\n    border: 2px solid blue;\r\n    box-shadow: 1px 0px 14px white;\r\n      }\r\n\r\n      .preview{\r\n        height: 150px;\r\n    border: 2px solid white;\r\n    width: 150px;\r\n    border-radius: 100%;\r\n    box-shadow: -1px 0px 16px white;\r\n      }\r\n\r\n      \r\n\r\n      .header{\r\n        // height: 100%;\r\n        display: flex;\r\n        gap: 1rem;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        \r\n      }\r\n\r\n\r\n\r\n      .avatar_cont{\r\n        height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n      }\r\n\r\n      .container{\r\n        height: 50%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n      }\r\n\r\n    @media screen and (max-width: 720px){\r\n      .preview{\r\n        height: 150px;\r\n        width: 150px;\r\n      }\r\n    }\r\n    @media screen and (max-width: 500px){\r\n      .title_container{\r\n        h1{\r\n          font-size: 1.5rem;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n`;\r\n\r\nexport default SetAvatar;\r\n","// for developement\r\n// export const host = \"http://localhost:5000\";\r\n\r\n// for deployment\r\n// export const host = \"https://chatapp-72oa.onrender.com\";\r\nexport const host = \"https://chatapi-production-4047.up.railway.app\";\r\n\r\nexport const registerRoute = `${host}/api/register`;\r\n\r\nexport const loginRoute = `${host}/api/login`;\r\n\r\nexport const setAvatarRoute = `${host}/api/setavatar`;\r\n\r\nexport const allUsersRoute = `${host}/api/allusers`;\r\n\r\nexport const sendMessageRoute = `${host}/message/addmsg`;\r\n\r\nexport const getAllMessageRoute = `${host}/message/getallmsg`;\r\n"],"names":["AvatarContainer","styled","navigate","useNavigate","useState","avatars","setavatars","isLoading","setisLoading","undefined","selectedAvatar","setselectedAvatar","avatartype","setavatartype","selectedImage","setSelectedImage","selectedAvatarImage","setSelectedAvatarImage","toastOptions","position","autoClose","pauseOnHover","draggable","theme","useEffect","localStorage","getItem","setProfilePicture","toast","JSON","parse","user","axios","setAvatarRoute","_id","image","data","isSet","isAvatarImageSet","avatarImage","setItem","stringify","avatar_data","i","Math","round","random","buffer","Buffer","push","toString","console","log","setProfileImage","className","onClick","map","avatar","index","src","alt","URL","createObjectURL","htmlFor","type","accept","onChange","e","target","files","selectedfile","length","imageFile","fileReader","FileReader","readAsDataURL","onload","srcData","result","id","host","registerRoute","loginRoute","allUsersRoute","sendMessageRoute","getAllMessageRoute"],"sourceRoot":""}